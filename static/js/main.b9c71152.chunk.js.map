{"version":3,"sources":["students/component.tsx","student/view/component.tsx","student/create/component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","table","minWidth","ListStudents","students","onDelete","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","IconButton","Link","to","TableBody","map","row","key","id","scope","firstName","lastName","phoneNumber","gpa","onClick","theme","createStyles","root","flexGrow","maxWidth","demo","backgroundColor","palette","background","paper","title","margin","spacing","StudentView","findStudent","useParams","student","rows","Card","variant","CardContent","Grid","container","item","xs","md","List","index","ListItem","ListItemText","primary","StudentCreate","onSave","state","action","React","useState","val","fn","e","target","value","FormControl","InputLabel","htmlFor","OutlinedInput","onChange","label","Button","color","observer","store","useLocalStore","_students","Object","values","addStudent","deleteStudent","path","uuidv4","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9c71152.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport { Student } from '../interfaces/student';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport {\n  Link\n} from \"react-router-dom\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n});\n\n\nexport default function ListStudents({ students, onDelete }: { students: Student[], onDelete: (id: string) => void }) {\n  const classes = useStyles();\n\n  return (<TableContainer component={Paper}>\n    <Table className={classes.table} aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>First Name</TableCell>\n          <TableCell>Last Name</TableCell>\n          <TableCell>Phone Number</TableCell>\n          <TableCell align=\"right\">GPA</TableCell>\n          <TableCell align=\"right\">\n            <IconButton component={Link} to={`/create`} aria-label=\"create\">\n              <AddIcon />\n            </IconButton>\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {students.map((row) => (\n          <TableRow key={row.id}>\n            <TableCell component=\"th\" scope=\"row\">\n              {row.firstName}\n            </TableCell>\n            <TableCell>{row.lastName}</TableCell>\n            <TableCell>{row.phoneNumber}</TableCell>\n            <TableCell align=\"right\">{row.gpa}</TableCell>\n            <TableCell align=\"right\">\n              <IconButton component={Link} to={`/student-carnival/${row.id}`} aria-label=\"delete\">\n                <OpenInNewIcon />\n              </IconButton>\n              <IconButton onClick={() => onDelete(row.id)} aria-label=\"delete\">\n                <DeleteIcon />\n              </IconButton>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>)\n}","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Student } from \"../../interfaces/student\";\nimport { useParams } from \"react-router-dom\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      maxWidth: 752,\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    title: {\n      margin: theme.spacing(4, 0, 2),\n    },\n  }),\n);\n\nexport default function StudentView({ findStudent }: { findStudent: (id: string) => Student | null }) {\n  const { id } = useParams();\n  const classes = useStyles();\n  const student = findStudent(id);\n  if (!student) return <div>No student found with id: {id}</div>;\n  const rows: Array<[string, keyof Student]> = [\n    [\"First name\", 'firstName'],\n    [\"Last name\", 'lastName'],\n    [\"Phone number\", 'phoneNumber'],\n    [\"GPA\", 'gpa'],\n  ]\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <div className={classes.demo}>\n              <List>\n                {rows.map((row, index) =>\n                  <ListItem key={index}>\n                    <ListItemText\n                      primary={row[0]}\n                    />\n                  </ListItem>\n                )}\n              </List>\n            </div>\n          </Grid>\n\n          <Grid item xs={12} md={6}>\n            <div className={classes.demo}>\n              <List>\n                {rows.map((row, index) =>\n                  <ListItem key={index}>\n                    <ListItemText\n                      primary={student[row[1]]}\n                    />\n                  </ListItem>\n                )}\n              </List>\n            </div>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  )\n}","/* eslint react-hooks/rules-of-hooks: 0 */\nimport React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Student } from \"../../interfaces/student\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport {\n  Link\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      maxWidth: 752,\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    title: {\n      margin: theme.spacing(4, 0, 2),\n    },\n  }),\n);\n\nconst rows: Array<[string, keyof Student]> = [\n  [\"First name\", 'firstName'],\n  [\"Last name\", 'lastName'],\n  [\"Phone number\", 'phoneNumber'],\n  [\"GPA\", 'gpa'],\n]\n\nexport default function StudentCreate({ onSave }: { onSave: (state: any) => void }) {\n  const classes = useStyles();\n\n  const state: any = {};\n  for (const row of rows) {\n    const action = React.useState(\"\");\n    state[row[1]] = {\n      val: action[0],\n      fn(e: React.ChangeEvent<HTMLInputElement>) { return action[1](e.target.value) }\n    }\n  }\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <div className={classes.demo}>\n              <List>\n                {rows.map((row, index) =>\n                  <ListItem key={index}>\n                    <FormControl variant=\"outlined\">\n                      <InputLabel htmlFor=\"component-outlined\">{row[0]}</InputLabel>\n                      <OutlinedInput id=\"component-outlined\" value={state[row[1]].val} onChange={state[row[1]].fn} label=\"Name\" />\n                    </FormControl>\n                  </ListItem>\n                )}\n                <ListItem key=\"save\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onSave(state)}\n                    component={Link}\n                    to=\"/student-carnival/\"\n                  >Save</Button>\n                </ListItem>\n              </List>\n            </div>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  )\n}","import React from 'react';\nimport ListStudents from './students/component';\nimport StudentView from './student/view/component';\nimport StudentCreate from './student/create/component';\nimport { observer, useLocalStore } from 'mobx-react'\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Student } from './interfaces/student';\n\nexport default observer(() => {\n\n  const store = useLocalStore(() => ({\n    _students: {\n      'd25c7a7b-bd77-44be-adb3-9ddda3c918e0': { id: 'd25c7a7b-bd77-44be-adb3-9ddda3c918e0', firstName: \"Raghu\", lastName: \"Ch\", phoneNumber: \"11\", gpa: \"4\" }\n    } as Record<string, Student>,\n    get students() {\n      return Object.values(store._students);\n    },\n    findStudent(id: string): Student | null {\n      return store._students[id];\n    },\n    addStudent: (student: Student) => {\n      store._students[student.id] = student;\n    },\n    deleteStudent: (id: string) => {\n      delete store._students[id];\n    }\n  }))\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/student-carnival/create\">\n            <StudentCreate onSave={(state: any) => {\n              store.addStudent({\n                id: uuidv4(),\n                firstName: state.firstName.val,\n                lastName: state.lastName.val,\n                phoneNumber: state.phoneNumber.val,\n                gpa: state.gpa.val,\n              })\n            }} />\n          </Route>\n\n          <Route path=\"/student-carnival/:id\" children={\n            <StudentView\n              findStudent={(id: string) => store.findStudent(id)}\n            />\n          } />\n\n          <Route path=\"/student-carnival/\">\n            <h3>List of students</h3>\n            <ListStudents\n              students={store.students}\n              onDelete={(id) => store.deleteStudent(id)}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}